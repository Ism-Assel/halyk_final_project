swagger: "2.0"
info:
  description: ""
  version: "1.0.0"
  title: "Swagger Bookstore"
tags:
  - name: "book"
    description: "All about books"
  - name: "author"
    description: "All about authors"
  - name: "publisher"
    description: "All about publishers"
  - name: "genre"
    description: "All about genres"
  - name: "user"
    description: "All about users"
schemes:
  - "https"
paths:
  /books:
    get:
      tags:
        - "book"
      summary: "Show all books"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Book"
        "405":
          description: "Invalid input"

    post:
      tags:
        - "book"
      summary: "Add a new book to the store"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Book object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Book"
        "405":
          description: "Invalid input"

    put:
      tags:
        - "book"
      summary: "Update a book to the store"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Book object that needs to be updated to the store"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Book"
        "405":
          description: "Invalid input"

  /books/{bookID}:
    get:
      tags:
        - "book"
      summary: "Find book by ID"
      description: "Returns a single book"
      produces:
        - "application/json"
      parameters:
        - name: "bookID"
          in: "path"
          description: "ID of book to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Book"
        "404":
          description: "Book not found"

    delete:
      tags:
        - "book"
      summary: "Deletes a book"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "bookID"
          in: "path"
          description: "Book ID to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Book not found"

  /books/findByTitle:
    get:
      tags:
        - "book"
      summary: "Finds Book by title"
      description: "Muliple Book can be provided with comma separated strings."
      produces:
        - "application/json"
      parameters:
        - name: "title"
          in: "query"
          description: "Title to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "400":
          description: "Invalid name value"

  /books/findByGenre:
    get:
      tags:
        - "book"
      summary: "Finds Book by genre"
      description: "Muliple Book can be provided with comma separated strings."
      produces:
        - "application/json"
      parameters:
        - name: "genre"
          in: "query"
          description: "Genre to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "400":
          description: "Invalid name value"

  /authors:
    get:
      tags:
        - "author"
      summary: "Show all authors"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Author"
        "405":
          description: "Invalid input"

    post:
      tags:
        - "author"
      summary: "Add a new author to the store"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Author object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Author"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Author"
        "405":
          description: "Invalid input"

    put:
      tags:
        - "author"
      summary: "Update a author to the store"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Author object that needs to be updated to the store"
          required: true
          schema:
            $ref: "#/definitions/Author"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Author"
        "405":
          description: "Invalid input"

  /authors/{authorID}:
    get:
      tags:
        - "author"
      summary: "Find author by ID"
      description: "Returns a single author"
      produces:
        - "application/json"
      parameters:
        - name: "authorID"
          in: "path"
          description: "ID of author to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Author"
        "404":
          description: "Author not found"

    delete:
      tags:
        - "author"
      summary: "Delete a author"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "authorID"
          in: "path"
          description: "Book id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Author not found"

  /authors/findByFio:
    get:
      tags:
        - "author"
      summary: "Finds Author by fio"
      description: "Muliple author can be provided with comma separated strings."
      produces:
        - "application/json"
      parameters:
        - name: "fio"
          in: "query"
          description: "Fio to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        "400":
          description: "Invalid name value"

  /authors/findByGenre:
    get:
      tags:
        - "author"
      summary: "Finds Author by genre"
      description: "Muliple author can be provided with comma separated strings."
      produces:
        - "application/json"
      parameters:
        - name: "genre"
          in: "query"
          description: "Genre to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        "400":
          description: "Invalid name value"

  /publishers:
    get:
      tags:
        - "publisher"
      summary: "Show all publishers"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Publisher"
        "405":
          description: "Invalid input"

    post:
      tags:
        - "publisher"
      summary: "Add a new publisher to the store"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Publisher object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Publisher"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        "405":
          description: "Invalid input"

    put:
      tags:
        - "publisher"
      summary: "Update a publisher to the store"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Publisher object that needs to be updated to the store"
          required: true
          schema:
            $ref: "#/definitions/Publisher"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        "405":
          description: "Invalid input"

  /publishers/{publisherID}:
    get:
      tags:
        - "publisher"
      summary: "Find publisher by ID"
      description: "Returns a single publisher"
      produces:
        - "application/json"
      parameters:
        - name: "publisherID"
          in: "path"
          description: "ID of publisher to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Publisher"
        "404":
          description: "Publisher not found"

    delete:
      tags:
        - "publisher"
      summary: "Delete a publisher"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "publisherID"
          in: "path"
          description: "Publisher id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Publisher not found"

  /publishers/findByName:
    get:
      tags:
        - "publisher"
      summary: "Finds Publisher by name"
      description: "Muliple publisher can be provided with comma separated strings."
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "Name to filter by"
          required: true
          type: "array"
          items:
            type: "string"
          collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Publisher"
        "400":
          description: "Invalid name value"

  /genres:
    get:
      tags:
        - "genre"
      summary: "Show all genres"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Genre"
        "405":
          description: "Invalid input"

    post:
      tags:
        - "genre"
      summary: "Add a new genre to the store"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Genre object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Genre"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Genre"
        "405":
          description: "Invalid input"

    put:
      tags:
        - "genre"
      summary: "Update a genre to the store"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Genre object that needs to be updated to the store"
          required: true
          schema:
            $ref: "#/definitions/Genre"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Genre"
        "405":
          description: "Invalid input"

  /genres/{genreID}:
    get:
      tags:
        - "genre"
      summary: "Find genre by ID"
      description: "Returns a single genre"
      produces:
        - "application/json"
      parameters:
        - name: "genreID"
          in: "path"
          description: "ID of genre to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Genre"
        "404":
          description: "Genre not found"

    delete:
      tags:
        - "genre"
      summary: "Delete a genre"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "genreID"
          in: "path"
          description: "Genre id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "Genre not found"

  /users:
    get:
      tags:
        - "user"
      summary: "Show all users"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        "405":
          description: "Invalid input"

    post:
      tags:
        - "user"
      summary: "Add a new user"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "405":
          description: "Invalid input"

    put:
      tags:
        - "user"
      summary: "Update a user"
      description: ""
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "405":
          description: "Invalid input"

  /users/{userID}:
    get:
      tags:
        - "user"
      summary: "Find user by ID"
      description: "Returns a single user"
      produces:
        - "application/json"
      parameters:
        - name: "userID"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"

    delete:
      tags:
        - "user"
      summary: "Delete a user"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "userID"
          in: "path"
          description: "User id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "404":
          description: "User not found"

definitions:
  Book:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      price:
        type: "number"
        format: "double"
      authorList:
        type: "array"
        items:
          $ref: "#/definitions/Author"
      publisher:
        $ref: "#/definitions/Publisher"
      title:
        type: "string"
        format: "byte"
      pages:
        type: "integer"
        format: "int64"
      publicationYear:
        type: "integer"
        format: "int64"
      genres:
        type: "array"
        items:
          $ref: "#/definitions/Genre"

  Author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "byte"
      surname:
        type: "string"
        format: "byte"
      lastname:
        type: "string"
        format: "byte"
      dateOfBirth:
        type: "string"
        format: "date"
      books:
        type: "array"
        items:
          $ref: "#/definitions/Book"
      genres:
        type: "array"
        items:
          $ref: "#/definitions/Genre"

  Publisher:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "byte"
      books:
        type: "array"
        items:
          $ref: "#/definitions/Book"

  Genre:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        format: "byte"

  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      login:
        type: "string"
        format: "byte"
      password:
        type: "string"
        format: "byte"
      role:
        type: "string"
        format: "byte"

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"